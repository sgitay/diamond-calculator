{"version":3,"sources":["components/Header.js","App.js","constants.js","Routes.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Navbar","Brand","Link","to","appbaseRef","Appbase","url","app","credentials","item_order","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","shape","clarity","hits","originalHits","userEnteredRelToList","userEnteredSellPc","userEnteredTotalPc","isLoading","activeInputField","initialRendering","userEnteredWeight","checkBoxStatus","handleColorDropdownChange","bind","assertThisInitialized","handleClarityDropdownChange","handleShapeDropdownChange","changeRelToList","totalPriceChange","sellPcChange","handleWeightInputChange","handleCheckBoxStatusChange","prevProps","prevState","prevUserEnteredWeight","_this$state","newHits","filter","o","Number","parseFloat","_source","fromweight","toweight","setState","console","log","value","_this2","getPrice","_this3","_this4","e","target","array","order","key","sort","b","A","B","indexOf","_this5","_this$state2","search","type","body","query","bool","must","term","shape.keyword","color.keyword","clarity.keyword","includes","excludes","from","then","response","catch","error","checked","total_pc","currencyFormatter","unformat","code","sell_pc","_this$state3","length","round","ppc","_this$state4","sellPrice","listPrice","toNumber","_this$state5","totalPrice","_this$state6","_this$state6$userEnte","relToList","_this$state7","_this$state7$userEnte","_this$state8","_this$state9","wsprice","isNaN","price","toFixed","toString","cprice","priceO","i","p","charAt","slice","_this6","_this$state10","getListPrice","list_price","format","sell_price","total_price","weight","getSPWhenRelToListActive","getTPWhenRelToListActive","getRelToListWhenSPActive","getTPWhenSPActive","getRelToListWhenTPActive","getSPWhenTPActive","resultHtml","className","htmlFor","id","onChange","disabled","convertPriceToCode","components_Header","index_es","componentId","dataField","title","showCount","onValueChange","transformData","list","mapOrder","Component","Routes","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_Routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2b18bb9.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst Header = props => {\n  return (\n    <header>\n      <Navbar>\n        <Navbar.Header>\n          <Navbar.Brand>\n            <Link to=\"/\">Diamond Calculator</Link>\n          </Navbar.Brand>\n        </Navbar.Header>\n      </Navbar>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { ReactiveBase, SingleDropdownList } from '@appbaseio/reactivesearch';\nimport Appbase from 'appbase-js';\nimport filter from 'lodash/filter';\nimport round from 'lodash/round';\n// import trim from 'lodash/trim';\nimport currencyFormatter from 'currency-formatter';\nimport toNumber from 'lodash/toNumber';\nimport {\n  AppbaseApp,\n  AppbaseAppCredential,\n  HOST_URL,\n  AppbaseAppType\n} from './constants';\nimport Header from './components/Header.js';\n\n// Create app instance\nconst appbaseRef = Appbase({\n  url: HOST_URL,\n  app: AppbaseApp,\n  credentials: AppbaseAppCredential\n});\nconst item_order = [\n  'FL',\n  'IF',\n  'VVS1',\n  'VVS2',\n  'VS1',\n  'VS2',\n  'SI1',\n  'SI2',\n  'SI3',\n  'I1',\n  'I2',\n  'I3'\n];\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: '',\n      shape: '',\n      clarity: '',\n      hits: [],\n      originalHits: [],\n      userEnteredRelToList: 0,\n      userEnteredSellPc: 0,\n      userEnteredTotalPc: 0,\n      isLoading: false,\n      activeInputField: '',\n      initialRendering: true,\n      userEnteredWeight: 0,\n      checkBoxStatus: false\n    };\n\n    this.handleColorDropdownChange = this.handleColorDropdownChange.bind(this);\n    this.handleClarityDropdownChange = this.handleClarityDropdownChange.bind(\n      this\n    );\n    this.handleShapeDropdownChange = this.handleShapeDropdownChange.bind(this);\n    this.changeRelToList = this.changeRelToList.bind(this);\n\n    // this.getPrice = this.getPrice.bind(this);\n    // this.getSellPrice = this.getSellPrice.bind(this);\n    // this.getRelToList = this.getRelToList.bind(this);\n\n    this.totalPriceChange = this.totalPriceChange.bind(this);\n    this.sellPcChange = this.sellPcChange.bind(this);\n    this.handleWeightInputChange = this.handleWeightInputChange.bind(this);\n    this.handleCheckBoxStatusChange = this.handleCheckBoxStatusChange.bind(\n      this\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let { userEnteredWeight: prevUserEnteredWeight } = prevState;\n    let { userEnteredWeight, originalHits, color, clarity, shape } = this.state;\n    if (color && shape && clarity && userEnteredWeight) {\n      if (prevUserEnteredWeight !== userEnteredWeight) {\n        // Always filter original list\n        let newHits = filter(originalHits, o => {\n          return (\n            Number.parseFloat(o._source.fromweight) <= userEnteredWeight &&\n            userEnteredWeight <= Number.parseFloat(o._source.toweight)\n          );\n        });\n        this.setState({\n          checkBoxStatus: false,\n          hits: newHits\n        });\n        console.log('hits', this.state.hits);\n      }\n    }\n  }\n\n  handleColorDropdownChange(value) {\n    this.setState(\n      {\n        color: value\n      },\n      () => {\n        this.getPrice();\n      }\n    );\n  }\n\n  handleClarityDropdownChange(value) {\n    this.setState(\n      {\n        clarity: value\n      },\n      () => {\n        this.getPrice();\n      }\n    );\n  }\n\n  handleShapeDropdownChange(value) {\n    this.setState(\n      {\n        shape: value\n      },\n      () => {\n        this.getPrice();\n      }\n    );\n  }\n\n  handleWeightInputChange(e) {\n    this.setState({\n      userEnteredWeight: e.target.value,\n      activeInputField: 'WEIGHT'\n    });\n  }\n    mapOrder(array, order, key) {\n    array.sort(function(a, b) {\n      var A = a[key],\n        B = b[key];\n      if (order.indexOf(A) > order.indexOf(B)) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    return array;\n  }\n  getPrice() {\n    let { color, shape, clarity } = this.state;\n\n    if (color === '' || shape === '' || clarity === '') {\n      return;\n    }\n\n    this.setState({\n      isLoading: true\n    });\n\n    appbaseRef\n      .search({\n        type: AppbaseAppType,\n        body: {\n          query: {\n            bool: {\n              must: [\n                {\n                  bool: {\n                    must: [\n                      {\n                        term: {\n                          'shape.keyword': shape\n                        }\n                      },\n                      {\n                        term: {\n                          'color.keyword': color\n                        }\n                      },\n                      {\n                        term: {\n                          'clarity.keyword': clarity\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          },\n          // size: 1,\n          _source: {\n            includes: ['*'],\n            excludes: []\n          },\n          from: 0\n        }\n      })\n      .then(response => {\n        this.setState({\n          hits: response.hits.hits,\n          originalHits: response.hits.hits,\n          isLoading: false,\n          initialRendering: false\n        });\n      })\n      .catch(error => {\n        this.setState({\n          isLoading: false,\n          initialRendering: false\n        });\n        console.log('Error: ', error);\n      });\n  }\n\n  handleCheckBoxStatusChange(e) {\n    this.setState({\n      checkBoxStatus: e.target.checked\n    });\n  }\n  changeRelToList(e) {\n    this.setState({\n      activeInputField: 'REL_TO_LIST',\n      userEnteredRelToList: e.target.value\n    });\n  }\n\n  totalPriceChange(e) {\n    let total_pc = currencyFormatter.unformat(e.target.value, { code: 'USD' });\n    this.setState({\n      activeInputField: 'TOTAL_PRICE',\n      userEnteredTotalPc: total_pc\n    });\n  }\n\n  sellPcChange(e) {\n    let sell_pc = currencyFormatter.unformat(e.target.value, { code: 'USD' });\n\n    this.setState({\n      activeInputField: 'SELL_PRICE',\n      userEnteredSellPc: sell_pc\n    });\n  }\n\n  getListPrice() {\n    let { hits, userEnteredWeight } = this.state;\n    if (!hits.length) {\n      return 0;\n    }\n    if (!userEnteredWeight) {\n      return 0;\n    }\n    let per_carat = round(hits[0]._source.ppc, 2);\n    return per_carat;\n  }\n\n  getSPWhenRelToListActive() {\n    let { userEnteredRelToList, hits } = this.state;\n    let sellPrice = 0;\n    if (!hits.length) {\n      return sellPrice;\n    }\n    if (userEnteredRelToList === '') {\n      return 0;\n    }\n    let listPrice = hits[0]._source.ppc;\n\n    sellPrice =\n      toNumber(listPrice) + toNumber(listPrice * (userEnteredRelToList / 100));\n    return round(sellPrice, 2);\n  }\n\n  getTPWhenRelToListActive() {\n    let { hits, userEnteredWeight, userEnteredRelToList } = this.state;\n    let totalPrice = 0;\n    if (!hits.length) {\n      return totalPrice;\n    }\n    if (userEnteredRelToList === '') {\n      return 0;\n    }\n    let listPrice = hits[0]._source.ppc;\n    let sellPrice =\n      toNumber(listPrice) + toNumber(listPrice * (userEnteredRelToList / 100));\n    if (userEnteredWeight > 0) {\n      totalPrice = sellPrice * userEnteredWeight;\n    }\n    return round(totalPrice, 2);\n  }\n\n  getRelToListWhenSPActive() {\n    let { userEnteredSellPc = 0, hits } = this.state;\n    let relToList = '';\n    if (!hits.length) {\n      return relToList;\n    }\n    if (userEnteredSellPc === '') {\n      return 0;\n    }\n    let listPrice = hits[0]._source.ppc;\n    relToList = ((userEnteredSellPc - listPrice) / listPrice) * 100;\n    return round(relToList, 2);\n  }\n\n  getTPWhenSPActive() {\n    let { userEnteredSellPc = 0, userEnteredWeight, hits } = this.state;\n    let totalPrice = '';\n    if (!hits.length) {\n      return totalPrice;\n    }\n    if (userEnteredSellPc === '') {\n      return 0;\n    }\n    //calculate total price\n    totalPrice = userEnteredSellPc * userEnteredWeight;\n    return round(totalPrice, 2);\n  }\n\n  getRelToListWhenTPActive() {\n    let { hits, userEnteredTotalPc, userEnteredWeight } = this.state;\n    let relToList = 0;\n    if (!hits.length) {\n      return relToList;\n    }\n    if (userEnteredTotalPc === '') {\n      return 0;\n    }\n    let listPrice = hits[0]._source.ppc;\n    let sellPrice = userEnteredTotalPc / userEnteredWeight;\n    relToList = ((sellPrice - listPrice) / listPrice) * 100;\n    return round(relToList, 2);\n  }\n\n  getSPWhenTPActive() {\n    let { userEnteredTotalPc, userEnteredWeight, hits } = this.state;\n    let sellPrice = '';\n    if (!hits.length) {\n      return sellPrice;\n    }\n    sellPrice = userEnteredTotalPc / userEnteredWeight;\n    return round(sellPrice, 2);\n  }\n\n  convertPriceToCode(wsprice) {\n    if (isNaN(wsprice) || wsprice === null || wsprice === '' || wsprice === 0)\n      return '';\n\n    wsprice = Number(wsprice);\n\n    var price = wsprice.toFixed(2).toString();\n\n    var cprice = '';\n    var priceO = '';\n\n    for (var i = 0; i < price.length; i++) {\n      var p = price.charAt(i);\n      if (p === '.') {\n        break;\n      }\n\n      var lastChar;\n\n      if (p === '1') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'B';\n            priceO += p;\n          }\n        } else {\n          cprice += 'B';\n          priceO += p;\n        }\n      } else if (p === '2') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'I';\n            priceO += p;\n          }\n        } else {\n          cprice += 'I';\n          priceO += p;\n        }\n      } else if (p === '3') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'G';\n            priceO += p;\n          }\n        } else {\n          cprice += 'G';\n          priceO += p;\n        }\n      } else if (p === '4') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'E';\n            priceO += p;\n          }\n        } else {\n          cprice += 'E';\n          priceO += p;\n        }\n      } else if (p === '5') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'S';\n            priceO += p;\n          }\n        } else {\n          cprice += 'S';\n          priceO += p;\n        }\n      } else if (p === '6') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'T';\n            priceO += p;\n          }\n        } else {\n          cprice += 'T';\n          priceO += p;\n        }\n      } else if (p === '7') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'H';\n            priceO += p;\n          }\n        } else {\n          cprice += 'H';\n          priceO += p;\n        }\n      } else if (p === '8') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'A';\n            priceO += p;\n          }\n        } else {\n          cprice += 'A';\n          priceO += p;\n        }\n      } else if (p === '9') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'L';\n            priceO += p;\n          }\n        } else {\n          cprice += 'L';\n          priceO += p;\n        }\n      } else if (p === '0') {\n        if (priceO !== '') {\n          lastChar = priceO.slice(-1);\n\n          if (lastChar === p) {\n            cprice += 'X';\n            priceO += p;\n          } else {\n            cprice += 'F';\n            priceO += p;\n          }\n        } else {\n          cprice += 'F';\n          priceO += p;\n        }\n      }\n    }\n    return cprice;\n  }\n\n  render() {\n    let {\n      isLoading,\n      activeInputField,\n      userEnteredRelToList,\n      userEnteredTotalPc,\n      userEnteredSellPc,\n      userEnteredWeight,\n      hits,\n      initialRendering,\n      checkBoxStatus,\n      shape,\n      color,\n      clarity\n    } = this.state;\n\n    const listPrice = this.getListPrice();\n    let list_price = currencyFormatter.format(listPrice, { code: 'USD' });\n\n    let relToList = 0;\n    let sellPrice = listPrice; // initially SP is same as LP\n    let sell_price = currencyFormatter.format(sellPrice, { code: 'USD' });\n    let totalPrice = listPrice * userEnteredWeight;\n    let total_price = currencyFormatter.format(totalPrice, { code: 'USD' });\n    let weight = userEnteredWeight;\n    switch (activeInputField) {\n      case 'REL_TO_LIST':\n        relToList = userEnteredRelToList;\n        sellPrice = this.getSPWhenRelToListActive();\n        sell_price = currencyFormatter.format(sellPrice, { code: 'USD' });\n        totalPrice = this.getTPWhenRelToListActive();\n        total_price = currencyFormatter.format(totalPrice, { code: 'USD' });\n        break;\n\n      case 'SELL_PRICE':\n        relToList = this.getRelToListWhenSPActive();\n        sellPrice = userEnteredSellPc;\n        sell_price = currencyFormatter.format(sellPrice, { code: 'USD' });\n        totalPrice = this.getTPWhenSPActive();\n        total_price = currencyFormatter.format(totalPrice, { code: 'USD' });\n\n        break;\n\n      case 'TOTAL_PRICE':\n        relToList = this.getRelToListWhenTPActive();\n        sellPrice = this.getSPWhenTPActive();\n        sell_price = currencyFormatter.format(sellPrice, { code: 'USD' });\n        totalPrice = userEnteredTotalPc;\n        total_price = currencyFormatter.format(totalPrice, { code: 'USD' });\n        break;\n\n      default:\n        break;\n    }\n\n    let resultHtml = '';\n    if (!initialRendering && !hits.length && userEnteredWeight !== '') {\n      resultHtml = <div className=\"No-records\">No record(s) available.</div>;\n    } else {\n      resultHtml = (\n        <fieldset className=\"form-fieldset\">\n          <legend className=\"form-legend\">Result:</legend>\n          {isLoading && (\n            <div className=\"App-Loader\">Hang on, fetching results...</div>\n          )}\n\n          <div className=\"outputSectionRow\">\n            <div className=\"outputColumns xs-device-set-margin\">\n              <div className=\"show-code-field\">\n                <label\n                  htmlFor=\"ValueToCodeConvert\"\n                  className=\"conversion-label\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    className=\"show-code-input\"\n                    id=\"ValueToCodeConvert\"\n                    onChange={this.handleCheckBoxStatusChange}\n                  />\n                  <span>Show Code</span>\n                </label>\n              </div>\n            </div>\n            <div className=\"outputColumns xs-device-set-margin\">\n              <h2 className=\"form-control-label\">List Price</h2>\n              {!checkBoxStatus ? (\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  value={list_price}\n                  disabled\n                />\n              ) : (\n                ''\n              )}\n              {checkBoxStatus && listPrice ? (\n                <div className=\"showCode\">\n                  {this.convertPriceToCode(listPrice)}\n                </div>\n              ) : null}\n            </div>\n            <div className=\"outputColumns xs-device-set-margin\">\n              <h2 className=\"form-control-label\">Sell Price</h2>\n              {!checkBoxStatus ? (\n                <input\n                  className=\"form-control\"\n                  value={sell_price}\n                  type=\"text\"\n                  onChange={this.sellPcChange}\n                />\n              ) : (\n                ''\n              )}\n              {checkBoxStatus && sellPrice ? (\n                <div className=\"showCode\">\n                  {this.convertPriceToCode(sellPrice)}\n                </div>\n              ) : null}\n            </div>\n            <div className=\"outputColumns xs-device-set-margin\">\n              <h2 className=\"form-control-label\">Total Price</h2>\n              {!checkBoxStatus ? (\n                <input\n                  className=\"form-control\"\n                  value={total_price}\n                  type=\"text\"\n                  onChange={this.totalPriceChange}\n                />\n              ) : (\n                ''\n              )}\n              {checkBoxStatus && totalPrice ? (\n                <div className=\"showCode\">\n                  {this.convertPriceToCode(totalPrice)}\n                </div>\n              ) : null}\n            </div>\n          </div>\n        </fieldset>\n      );\n    }\n\n    return (\n      <div className=\"container\">\n        <Header />\n        <ReactiveBase\n          app={AppbaseApp}\n          credentials={AppbaseAppCredential}\n          type={AppbaseAppType}\n        >\n          <div id=\"input-area\">\n            <fieldset className=\"form-fieldset\">\n              <legend className=\"form-legend\">FillUp Details:</legend>\n\n              <div className=\"inputSectionRow\">\n                <div className=\"inputColumns xs-device-set-margin\">\n                  <SingleDropdownList\n                    componentId=\"shape\"\n                    className=\"reactive-form-control\"\n                    dataField=\"shape.keyword\"\n                    title=\"Shape\"\n                    showCount={false}\n                    onValueChange={this.handleShapeDropdownChange}\n                  />\n                </div>\n                <div className=\"inputColumns xs-device-set-margin\">\n                  <SingleDropdownList\n                    componentId=\"color\"\n                    className=\"reactive-form-control\"\n                    dataField=\"color.keyword\"\n                    title=\"Color\"\n                    showCount={false}\n                    onValueChange={this.handleColorDropdownChange}\n                  />\n                </div>\n                <div className=\"inputColumns xs-device-set-margin\">\n                  <SingleDropdownList\n                    componentId=\"clarity\"\n                    className=\"reactive-form-control\"\n                    dataField=\"clarity.keyword\"\n                    title=\"Clarity\"\n                    showCount={false}\n                    transformData={list => {\n                      var ordered_array;\n                      ordered_array = this.mapOrder(list, item_order, 'key');\n                      return ordered_array;\n                    }}\n                    onValueChange={this.handleClarityDropdownChange}\n                  />\n                </div>\n                <div className=\"inputColumns\">\n                  <h2 className=\"form-control-label\">Weight</h2>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    onChange={this.handleWeightInputChange}\n                    value={weight}\n                  />\n                </div>\n                <div className=\"inputColumns xs-device-set-margin\">\n                  <h2 className=\"form-control-label\">Mark(%)</h2>\n                  {userEnteredWeight && color && shape && clarity ? (\n                    <input\n                      type=\"number\"\n                      className=\"form-control\"\n                      onChange={this.changeRelToList}\n                      value={relToList}\n                    />\n                  ) : (\n                    <input\n                      type=\"number\"\n                      className=\"form-control\"\n                      onChange={this.changeRelToList}\n                      value={relToList}\n                      disabled\n                    />\n                  )}\n                </div>\n              </div>\n            </fieldset>\n          </div>\n\n          <div id=\"result-area\">{resultHtml}</div>\n        </ReactiveBase>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// Constants\nexport const HOST_URL = 'https://scalr.api.appbase.io';\nexport const AppbaseApp = 'kwfl-rapnet-prices';\nexport const AppbaseAppCredential =\n  'kg4GbKwx6:063eeb44-18e9-48c9-b5a0-4541d889597f';\nexport const AppbaseAppType = 'rapnetpricing';\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport App from './App.js';\n\nclass Routes extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Route exact path=\"*\" component={App} />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes.js';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/index.css';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}